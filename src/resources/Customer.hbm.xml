<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.lanou.domain.Customer">
        <id name="id">
            <generator class="native"/>
        </id>
        <!--用户名称-->
        <property name="name"/>
        <!--登录名称-->
        <property name="loginName"/>
        <!--密码-->
        <property name="password"/>
        <!--性别-->
        <property name="gender"/>

        <!--双向 1-n , 在n (订单)能找到对应的 1 (用户),
             也能在1 (用户) 找到对应的 n 的集合(订单集合);
             在n的一方定义many-to-one, 在1的一方定义 set'
             set: 在1的一方定义n的集合
                name: 在1 的一方中对应的属性集合的名称
                table: n的一方对应的数据库表名, 参见n的映射文件中的table属相设置
                inverse: 配置1 与n 的关系有谁控制,
                    false: 主动方,
                    true: 被动方
                    通常在 n 的一方配置为 false, 即主动维护两者之间的关系
                    inverse设置的是当前属性时主动方还是被动方,
                    1. 如果设置为主动方, 则删除用户时, 不会主动去删除订单表中的数据
                    2. 如果设置为被动方, 则删除用户时, 可以通过级联关系将订单表中对应
                        数据删除
                 cascade: 级联属性, 可以在 <set> , <many-to-one>,<one-to-one>标签中使用
                    代表操作当前对象时是否会级联其他对象
                    all: 当用 session的save, update, delete, saveOrUpdate会级联到其他对象
                    save-update: 当用 session的save, update, saveOrUpdate会级联到其他对象
                    delete: 当用session的delete删除是会级联到其他对象

             key: 1与n关联的外键名称, 参见n的一方中 many-to-one中定义的column
             one-to-many: 在1的一方定义的n的类路径
             -->
        <set name="orders"
             table="Orders"
             inverse="true"
             cascade="all">
            <key column="customer_id"/>
            <one-to-many class="com.lanou.domain.Order"/>
        </set>
    </class>
</hibernate-mapping>